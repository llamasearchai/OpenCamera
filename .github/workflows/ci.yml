name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  OPENCAM_ENABLE_ML: 0
  OPENCAM_CASCADE: /nonexistent

jobs:
  build-and-test:
    name: C++ build and tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: macos-latest
            compiler: gcc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up toolchain (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git \
            libopencv-dev libspdlog-dev libgtest-dev libgmock-dev

      - name: Set up toolchain (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake opencv spdlog llvm googletest
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Configure
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_TESTING=ON \
            -DENABLE_BENCHMARKS=ON \
            -DENABLE_EXAMPLES=ON \
            -DOPENCAM_ENABLE_ML=0

      - name: Build
        run: cmake --build build -j

      - name: Test
        run: ctest --test-dir build --output-on-failure --verbose

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-results-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            build/**/*.xml
            build/**/Testing/**/Test.xml
          if-no-files-found: ignore

  code-quality:
    name: C++ formatting and static analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy cppcheck cmake build-essential
      - name: clang-format check
        run: |
          mapfile -t files < <(git ls-files '*.cpp' '*.cc' '*.c' '*.hpp' '*.hh' '*.h')
          if [ "${#files[@]}" -gt 0 ]; then
            clang-format --dry-run --Werror "${files[@]}"
          fi
      - name: Configure and minimal build for analysis
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -j
      - name: cppcheck (non-blocking)
        run: |
          cppcheck --enable=all --inline-suppr --template=gcc . || true

  python:
    name: Python package tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8','3.9','3.10','3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libopencv-dev libspdlog-dev python3-dev
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          # Validate version consistency between pyproject.toml and setup.py
          python - <<'PY'
          import re, pathlib, sys
          root = pathlib.Path('.')
          pyproj = (root/'pyproject.toml').read_text()
          setup = (root/'setup.py').read_text()
          vp = re.search(r'version\\s*=\\s*"([^"]+)"', pyproj)
          vs = re.search(r'VERSION\\s*=\\s*"([^"]+)"', setup)
          if not vp or not vs or vp.group(1) != vs.group(1):
              print(f"Version mismatch: pyproject={vp.group(1) if vp else None}, setup.py={vs.group(1) if vs else None}", file=sys.stderr)
              sys.exit(1)
          PY
      - name: Build pybind extension
        run: |
          pushd python/bindings
          python setup.py build_ext --inplace
          popd
      - name: Run pytest
        run: |
          pytest -v

  release:
    name: Release on tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-test, code-quality, python]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build sdist and wheel
        run: |
          python -m pip install --upgrade pip build twine
          rm -rf dist
          python -m build
          ls -l dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist
          print_hash: true
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Generate release notes from CHANGELOG
        id: notes
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          awk 'BEGIN{p=0} /^## \\['TAG'\\]/{p=1;next} /^## \\[/{if(p)exit} p' CHANGELOG.md > RELNOTES.md
          if [ ! -s RELNOTES.md ]; then
            echo "No section for ${TAG} in CHANGELOG.md; using fallback notes." > RELNOTES.md
          fi
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat RELNOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: OpenCam ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body }}
          generate_release_notes: false
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz